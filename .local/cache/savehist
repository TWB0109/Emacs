;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(extended-command-history eww-prompt-history read-expression-history minibuffer-history pdf-annot-color-history counsel-M-x-history empty-history evil-ex-search-history evil-ex-history bookmark-history file-name-history ivy-history))
(setq extended-command-history '("evil-mode" "vterm"))
(setq eww-prompt-history '("pornhub.com"))
(setq read-expression-history '("(define-key 'global (kbd \"SPC-o\") emms-player-mpd-pause)" "." "(echo '\"uwu\")" "(setq display-line-numbers-type 'relative)"))
(setq counsel-M-x-history '(#("haskell" 0 7 (ivy-index 0)) "haskell-mode" "haskell-mode" "run-haskell" #("clipbo" 0 6 (ivy-index 0)) "clipboard-yank" "run-haskell" #("clipboard" 0 9 (ivy-index 0)) "clipboard-yank" #("insta" 0 5 (ivy-index 0)) "package-install" #("package" 0 7 (ivy-index 1)) "list-packages" #("vterm" 0 5 (ivy-index 1)) "vterm-mode" #("eval line" 0 9 (ivy-index 0)) "+eval/line-or-region" #("eval" 0 4 (ivy-index 18)) "+eval/line-or-region" "eval-expression" "eval-expression" #("emms-player-mpd-next" 0 20 (ivy-index 0)) #("emms-brow" 0 9 (ivy-index 0)) "emms-browser" #("emms-player" 0 11 (ivy-index 0)) "emms-player-mpd-play" #("emms mpd" 0 8 (ivy-index 2)) "emms-player-mpd-play" #("emms" 0 4 (ivy-index 0)) "emms-player-mpd-connect" "emms-player-mpd-connect" #("emms-br" 0 7 (ivy-index 0)) "emms-browser" #("emms-player-mpd" 0 15 (ivy-index 2)) "emms-player-mpd-connect" "emms-browser" #("emms-add-directory-t" 0 20 (ivy-index 0)) "emms-add-directory-tree" #("emms-add-dire" 0 13 (ivy-index 0)) "emms-add-dired" "emms-browser" #("doom/rel" 0 8 (ivy-index 0)) "doom/reload" #("mpdel" 0 5 (ivy-index 4)) "mpdel-song-open" "libmpdel-play" "mpdel-browser-open" "libmpdel-connect-profile" "package-install" "eval-expression" "eval-expression" "eval-expression" #("package-ins" 0 11 (ivy-index 0)) "package-install" "list-packages" #("dante-re" 0 8 (ivy-index 0)) "dante-restart" #("dante dest" 0 10 (ivy-index 0)) "dante-destroy" #("eww-buffer-kill" 0 15 (ivy-index 0)) #("eww-reload" 0 10 (ivy-index 0)) #("eww" 0 3 (ivy-index 1)) #("eww-mode" 0 8 (ivy-index 0)) "eval-expression" #("dired" 0 5 (ivy-index 0)) "eval-buffer" #("eshell" 0 6 (ivy-index 0)) #("load-theme" 0 10 (ivy-index 0)) #("doom/re" 0 7 (ivy-index 5)) "doom/reload-font" #("doom/restart" 0 12 (ivy-index 0)) #("doom/reload" 0 11 (ivy-index 0))))
(setq evil-ex-search-history '("mu4" "spcing" "spell" "terminal" "stump" "haskell"))
(setq evil-ex-history '(#("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("!%" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>!wc -l" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("set showcmd" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("e ~/test.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("set syntax" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("stumpish" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("e ~/.config/stumpwm/stumpwmrc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("e ~/.doom.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/.doom.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("set nospell" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("set spell" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("set spell!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e ~/dox/LaTeX/CVs/CV.pdf" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("e! ~/.vimrc" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("e ~/.doom.d/init.el" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19))))
(setq bookmark-history '(".xmonad" #(".xmonad" 0 7 (ivy-index 0))))
(setq file-name-history '(#("config.el" 0 9 (ivy-index 0)) #("/home/brandon/dox/haskell/test.hs" 0 33 (ivy-index 0)) #("/home/brandon/.doom.d/config.el" 0 31 (ivy-index 0)) #("/home/brandon/music/" 0 20 (ivy-index 0)) #("/home/brandon/.doom.d/packages.el" 0 33 (ivy-index 0)) #("/home/brandon/.config/i3/" 0 25 (ivy-index 0)) #("/home/brandon/.xmonad/xmonad.hs" 0 31 (ivy-index 0)) #("/home/brandon/.doom.d/init.el" 0 29 (ivy-index 0)) #("/home/brandon/vimwiki/vimwiki.wiki" 0 34 (ivy-index 0)) #("custom.el" 0 9 (ivy-index 0)) #("/home/brandon/.config/stumpwm/" 0 30 (ivy-index 0)) #("/home/brandon/.doom.d/" 0 22 (ivy-index 0)) #("/usr/share/stumpwm/" 0 19 (ivy-index 0)) #("/home/brandon/dox/LaTeX/CVs/" 0 28 (ivy-index 0)) #("/home/brandon/.xmonad/" 0 22 (ivy-index 0))))
(setq ivy-history '(#("mpdel" 0 5 (ivy-index 0)) #("Doom Emacs issues" 0 17 (ivy-index 0)) #("doom-gruvbox" 0 12 (ivy-index 1)) #("~/.doom.d/config.el" 0 19 (ivy-index 0)) #("confi" 0 5 (ivy-index 0))))
(setq evil-jumps-history '((3799 "/home/brandon/.config/i3/config") (12456 "/home/brandon/.config/i3/config") (1835 "/home/brandon/.config/i3/config") (12291 "/home/brandon/.config/i3/config") (12456 "/home/brandon/.config/i3/config") (1 "/home/brandon/.config/i3/config") (12428 "/home/brandon/.config/i3/config") (3684 "/home/brandon/.config/i3/config") (638 "/home/brandon/.xmonad/xmonad.hs") (4357 "/home/brandon/.xmonad/xmonad.hs") (3059 "/home/brandon/.xmonad/xmonad.hs") (1318 "/home/brandon/.config/stumpwm/config") (1303 "/home/brandon/.config/stumpwm/config") (1331 "/home/brandon/.config/stumpwm/config") (403 "/home/brandon/.config/stumpwm/config") (1346 "/home/brandon/.config/stumpwm/config")))
(setq kill-ring '("cd .config cd i3
" "
" "import Xmonad
" "Data" "import" "" "import Brick
" "
" "main = do
" "
" "  (center (str \"Left\") <+> vBorder <+> center (str \"Right\"))
" "  borderWithLabel (str \"Hello!\") $
" "  withBorderStyle unicode $
" "    
    
    " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "  
" ")" "$" "withBorderStyle unicode $
borderWithLabel (str \"Hello!\") $
(center (str \"Left\") <+> vBorder <+> center (str \"Right\"))
" "
" "
" "

withBorderStyle unicode $
borderWithLabel (str \"Hello!\") $
(center (str \"Left\") <+> vBorder <+> center (str \"Right\"))
" "import Brick
" "
" "" "import Brick
" "
" "import Brick
" "  0blayout           20190703.527  available  melpa      Layout grouping with ease
  0x0                20200521.1352 available  melpa      Upload to 0x0.st
  0xc                20190219.117  available  melpa      Base conversion made easy
  2048-game          20200417.259  available  melpa      play 2048 in Emacs
  2bit               20200926.1418 available  melpa      Library for reading data from 2bit files
  4clojure           20200123.2008 available  melpa      Open and evaluate 4clojure.com questions.
  @                  20181225.1438 available  melpa      multiple-inheritance prototype-based objects DSL
  a                  20180907.953  available  melpa      Associative data structure functions
  aa-edit-mode       20170119.320  available  melpa      Major mode for editing AA(S_JIS Art) and .mlt file
  abc-mode           20171020.1019 available  melpa      Major mode for editing abc music files
  abgaben            20171119.646  available  melpa      review and correct assignments received by mail
  abl-mode           20190403.904  available  melpa      Python TDD minor mode
  abridge-diff       20200917.1754 available  melpa      Abridge long line-based diff hunks, including in magit
  abs-mode           20200220.1701 available  melpa      Major mode for the modeling language Abs
  abyss-theme        20170808.1345 available  melpa      A dark theme with contrasting colours.
  ac-alchemist       20150908.656  available  melpa      auto-complete source for alchemist
  ac-c-headers       20200816.1007 available  melpa      auto-complete source for C headers
  ac-capf            20151101.217  available  melpa      auto-complete source with completion-at-point
  ac-cider           20161006.719  available  melpa      Clojure auto-complete sources using CIDER
  ac-clang           20180710.546  available  melpa      Auto Completion source by libclang for GNU Emacs
  ac-dcd             20190902.1124 available  melpa      Auto Completion source for dcd for GNU Emacs
  ac-emacs-eclim     20180911.1121 available  melpa      auto-complete source for eclim
  ac-emmet           20131015.1558 available  melpa      auto-complete sources for emmet-mode's snippets
  ac-emoji           20150823.711  available  melpa      auto-complete source of Emoji
  ac-etags           20161001.1507 available  melpa      etags/ctags completion source for auto-complete
  ac-geiser          20200318.824  available  melpa      Auto-complete backend for geiser
  ac-haskell-process 20150423.1402 available  melpa      Haskell auto-complete source which uses the current haskell process
  ac-helm            20160319.233  available  melpa      Helm interface for auto-complete
  ac-html            20151005.731  available  melpa      auto complete source for html tags and attributes
  ac-html-angular    20151225.719  available  melpa      auto complete angular15 data for `ac-html' and `company-web'
  ac-html-bootstrap  20160302.1701 available  melpa      auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'
  ac-html-csswatcher 20151208.2113 available  melpa      css/less class/id completion with `ac-html' or `company-web'
  ac-inf-ruby        20131115.1150 available  melpa      Enable auto-complete in inf-ruby sessions
  ac-ispell          20151101.226  available  melpa      ispell completion source for auto-complete
  ac-js2             20190101.933  available  melpa      Auto-complete source for Js2-mode, with navigation
  ac-math            20141116.2127 available  melpa      Auto-complete sources for input of mathematical symbols and latex tags
  ac-mozc            20150227.1619 available  melpa      auto-complete sources for Japanese input using Mozc
  ac-octave          20180406.334  available  melpa      An auto-complete source for Octave
  ac-php             20200916.751  available  melpa      Auto Completion source for PHP.
  ac-php-core        20200916.751  available  melpa      The core library of the ac-php.
  ac-racer           20170114.809  available  melpa      auto-complete source of racer
  ac-rtags           20191222.920  available  melpa      auto-complete back-end for RTags
  ac-skk             20141230.119  available  melpa      auto-complete-mode source for DDSKK a.k.a Japanese input method
  ac-slime           20171027.2100 available  melpa      An auto-complete source using slime completions
  ac-sly             20170728.1027 available  melpa      An auto-complete source using sly completions
  academic-phrases   20180723.1021 available  melpa      Bypass that mental block when writing your papers.
  ace-flyspell       20170309.509  available  melpa      Jump to and correct spelling errors using `ace-jump-mode' and flyspell
  ace-isearch        20200912.754  available  melpa      A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper
  ace-jump-buffer    20171031.1550 available  melpa      fast buffer switching extension to `avy'
  ace-jump-helm-line 20160918.1836 available  melpa      Ace-jump to a candidate in helm window
  ace-jump-mode      20140616.815  available  melpa      a quick cursor location minor mode for emacs
  ace-jump-zap       20170717.1849 available  melpa      Character zapping, `ace-jump-mode` style
  ace-link           20200518.957  available  melpa      Quickly follow links
  ace-mc             20190206.749  available  melpa      Add multiple cursors quickly using ace jump
  ace-pinyin         20190917.318  available  melpa      Jump to Chinese characters using avy or ace-jump-mode
  ace-popup-menu     20190713.1337 available  melpa      Replace GUI popup menu with something more efficient
  ace-window         0.9.0         available  gnu        Quickly switch windows.
  ace-window         20200606.1259 available  melpa      Quickly switch windows.
  achievements       20150531.1317 available  melpa      Achievements for emacs usage.
  ack                1.10          available  gnu        interface to ack-like tools
 " "(print \"uwu\")
" ";" "" "gruvbox" "" "➜  .config cd ema
" "➜  .config cd ema
" "(define-key 'global (kbd \"SPC-o\") emms-player-mpd-pause)
" "evil-" "(define-key 'global (kbd \"SPC-o\") emms-player-mpd-pause)
" "
" " " "-package" "some" ";" "
" ";(package! some-package)
" ";(package! some-package)
"))
(setq mark-ring 'nil)
(setq global-mark-ring 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
